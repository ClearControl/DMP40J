package dmp40j.bindings;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>TLDFM_64</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library(value = "TLDFM_64", dependencies = {"TLDFM_64.dll"}) 
@Runtime(CRuntime.class) 
public class TLDFM_64Library {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : lib\dmp40\TLDFM_def.h</i>
	 */
	public enum TLDFM_Switch_Mode implements IntValuedEnum<TLDFM_Switch_Mode > {
		SM_Auto(0),
		SM_Manual(1);
		TLDFM_Switch_Mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<TLDFM_Switch_Mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<TLDFM_Switch_Mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : lib\dmp40\TLDFM_def.h</i>
	 */
	public enum TLDFM_Access_Mode implements IntValuedEnum<TLDFM_Access_Mode > {
		AM_No_Lock(0),
		AM_Exclusive_Lock(1),
		AM_Shared_Lock(2);
		TLDFM_Access_Mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<TLDFM_Access_Mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<TLDFM_Access_Mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final String TLDFM_VI_FIND_RSC_PATTERN = (String)"USB?*?{VI_ATTR_MANF_ID==0x1313 && VI_ATTR_MODEL_CODE==0x8016}";
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_STRING_LENGTH = (int)60;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_INSTR_NAME_LENGTH = (int)28;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_SN_LENGTH = (int)28;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_BUFFER_SIZE = (int)256;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_USERTEXT_BUFFER_SIZE = (int)61;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERR_DESCR_BUFER_SIZE = (int)512;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_INSTR_WARNING_OFFSET = (int)0x3FFC0900;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_ELECTRIC = (int)(0x3FFC0900 + 0x00);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_IC = (int)(0x3FFC0900 + 0x01);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_MIRROR = (int)(0x3FFC0900 + 0x03);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_SUCCESS = (int)0x0000;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_NOT_POS = (int)0xFFFF;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_PWR_ERR = (int)0x0001;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_TEMP_ERR = (int)0x0010;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int T_MIRROR = (int)(0);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int T_TILT = (int)(1);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int T_BOTH = (int)(2);
	/**
	 * Global functions<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_device_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:5</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_device_count(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViUInt32 > pDeviceCount) {
		return Pointer.pointerToAddress(TLDFM_get_device_count(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pDeviceCount)));
	}
	@Ptr
	protected native static long TLDFM_get_device_count(@Ptr long instrumentHandle, @Ptr long pDeviceCount);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_device_information(ViSession, ViUInt32, ViChar[], ViChar[], ViChar[], ViBoolean*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:8</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_device_information(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 deviceIndex, Pointer<TLDFM_64Library.ViChar > manufacturer, Pointer<TLDFM_64Library.ViChar > instrumentName, Pointer<TLDFM_64Library.ViChar > serialNumber, Pointer<TLDFM_64Library.ViBoolean > pDeviceAvailable, Pointer<TLDFM_64Library.ViChar > resourceName) {
		return Pointer.pointerToAddress(TLDFM_get_device_information(Pointer.getPeer(instrumentHandle), Pointer.getPeer(deviceIndex), Pointer.getPeer(manufacturer), Pointer.getPeer(instrumentName), Pointer.getPeer(serialNumber), Pointer.getPeer(pDeviceAvailable), Pointer.getPeer(resourceName)));
	}
	@Ptr 
	protected native static long TLDFM_get_device_information(@Ptr long instrumentHandle, @Ptr long deviceIndex, @Ptr long manufacturer, @Ptr long instrumentName, @Ptr long serialNumber, @Ptr long pDeviceAvailable, @Ptr long resourceName);
	/**
	 * required VXIpnp instrument driver functions<br>
	 * Original signature : <code>_VI_FUNC TLDFM_init(ViRsrc, ViBoolean, ViBoolean, ViSession*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:19</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_init(TLDFM_64Library.ViRsrc resourceName, TLDFM_64Library.ViBoolean IDQuery, TLDFM_64Library.ViBoolean resetDevice, Pointer<TLDFM_64Library.ViSession > pInstrumentHandle) {
		return Pointer.pointerToAddress(TLDFM_init(Pointer.getPeer(resourceName), Pointer.getPeer(IDQuery), Pointer.getPeer(resetDevice), Pointer.getPeer(pInstrumentHandle)));
	}
	@Ptr 
	protected native static long TLDFM_init(@Ptr long resourceName, @Ptr long IDQuery, @Ptr long resetDevice, @Ptr long pInstrumentHandle);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_close(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:24</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_close(TLDFM_64Library.ViSession instrumentHandle) {
		return Pointer.pointerToAddress(TLDFM_close(Pointer.getPeer(instrumentHandle)));
	}
	@Ptr 
	protected native static long TLDFM_close(@Ptr long instrumentHandle);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_reset(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:26</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_reset(TLDFM_64Library.ViSession instrumentHandle) {
		return Pointer.pointerToAddress(TLDFM_reset(Pointer.getPeer(instrumentHandle)));
	}
	@Ptr 
	protected native static long TLDFM_reset(@Ptr long instrumentHandle);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_self_test(ViSession, ViInt16*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:28</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_self_test(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViInt16 > pSelfTestResult, Pointer<TLDFM_64Library.ViChar > selfTestMessage) {
		return Pointer.pointerToAddress(TLDFM_self_test(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSelfTestResult), Pointer.getPeer(selfTestMessage)));
	}
	@Ptr 
	protected native static long TLDFM_self_test(@Ptr long instrumentHandle, @Ptr long pSelfTestResult, @Ptr long selfTestMessage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_error_query(ViSession, ViInt32*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:32</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_error_query(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViInt32 > pErrorCode, Pointer<TLDFM_64Library.ViChar > errorMessage) {
		return Pointer.pointerToAddress(TLDFM_error_query(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pErrorCode), Pointer.getPeer(errorMessage)));
	}
	@Ptr 
	protected native static long TLDFM_error_query(@Ptr long instrumentHandle, @Ptr long pErrorCode, @Ptr long errorMessage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_error_message(ViSession, ViStatus, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:36</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_error_message(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViStatus errorCode, Pointer<TLDFM_64Library.ViChar > errorMessage) {
		return Pointer.pointerToAddress(TLDFM_error_message(Pointer.getPeer(instrumentHandle), Pointer.getPeer(errorCode), Pointer.getPeer(errorMessage)));
	}
	@Ptr 
	protected native static long TLDFM_error_message(@Ptr long instrumentHandle, @Ptr long errorCode, @Ptr long errorMessage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_revision_query(ViSession, ViChar[], ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:40</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_revision_query(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > driverRevision, Pointer<TLDFM_64Library.ViChar > firmwareRevision) {
		return Pointer.pointerToAddress(TLDFM_revision_query(Pointer.getPeer(instrumentHandle), Pointer.getPeer(driverRevision), Pointer.getPeer(firmwareRevision)));
	}
	@Ptr 
	protected native static long TLDFM_revision_query(@Ptr long instrumentHandle, @Ptr long driverRevision, @Ptr long firmwareRevision);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>_VI_FUNC TLDFM_set_USB_access_mode(ViSession, ViUInt32, ViString, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:46</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_USB_access_mode(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 accessMode, TLDFM_64Library.ViString requestedKey, Pointer<TLDFM_64Library.ViChar > accessKey) {
		return Pointer.pointerToAddress(TLDFM_set_USB_access_mode(Pointer.getPeer(instrumentHandle), Pointer.getPeer(accessMode), Pointer.getPeer(requestedKey), Pointer.getPeer(accessKey)));
	}
	@Ptr 
	protected native static long TLDFM_set_USB_access_mode(@Ptr long instrumentHandle, @Ptr long accessMode, @Ptr long requestedKey, @Ptr long accessKey);
	/**
	 * segment voltage functions<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_segment_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:54</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_segment_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 segmentIndex, Pointer<TLDFM_64Library.ViReal64 > pSegmentVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_segment_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentIndex), Pointer.getPeer(pSegmentVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_segment_voltage(@Ptr long instrumentHandle, @Ptr long segmentIndex, @Ptr long pSegmentVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_segment_voltage(ViSession, ViUInt32, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:58</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_segment_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 segmentIndex, TLDFM_64Library.ViReal64 segmentVoltage) {
		return Pointer.pointerToAddress(TLDFM_set_segment_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentIndex), Pointer.getPeer(segmentVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_set_segment_voltage(@Ptr long instrumentHandle, @Ptr long segmentIndex, @Ptr long segmentVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:62</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_segment_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_segment_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_segment_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:65</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_segment_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages) {
		return Pointer.pointerToAddress(TLDFM_set_segment_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_set_segment_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * tilt element voltage functions<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_tilt_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:71</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_tilt_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 tiltIndex, Pointer<TLDFM_64Library.ViReal64 > pTiltVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_tilt_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltIndex), Pointer.getPeer(pTiltVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_tilt_voltage(@Ptr long instrumentHandle, @Ptr long tiltIndex, @Ptr long pTiltVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_tilt_voltage(ViSession, ViUInt32, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:75</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_tilt_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 tiltIndex, TLDFM_64Library.ViReal64 tiltVoltage) {
		return Pointer.pointerToAddress(TLDFM_set_tilt_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltIndex), Pointer.getPeer(tiltVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_set_tilt_voltage(@Ptr long instrumentHandle, @Ptr long tiltIndex, @Ptr long tiltVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:79</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_tilt_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_tilt_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_tilt_voltages(@Ptr long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:82</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_tilt_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_set_tilt_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_set_tilt_voltages(@Ptr long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_tilt_amplitude_angle(ViSession, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:85</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_tilt_amplitude_angle(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViReal64 amplitute, TLDFM_64Library.ViReal64 angle) {
		return Pointer.pointerToAddress(TLDFM_set_tilt_amplitude_angle(Pointer.getPeer(instrumentHandle), Pointer.getPeer(amplitute), Pointer.getPeer(angle)));
	}
	@Ptr 
	protected native static long TLDFM_set_tilt_amplitude_angle(@Ptr long instrumentHandle, @Ptr long amplitute, @Ptr long angle);
	/**
	 * sets the voltages for all segments and all tilt elements<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:93</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:97</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_set_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_set_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * device information functions<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_manufacturer_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:104</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_manufacturer_name(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > manufacturerName) {
		return Pointer.pointerToAddress(TLDFM_get_manufacturer_name(Pointer.getPeer(instrumentHandle), Pointer.getPeer(manufacturerName)));
	}
	@Ptr 
	protected native static long TLDFM_get_manufacturer_name(@Ptr long instrumentHandle, @Ptr long manufacturerName);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_instrument_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:107</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_instrument_name(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > instrName) {
		return Pointer.pointerToAddress(TLDFM_get_instrument_name(Pointer.getPeer(instrumentHandle), Pointer.getPeer(instrName)));
	}
	@Ptr 
	protected native static long TLDFM_get_instrument_name(@Ptr long instrumentHandle, @Ptr long instrName);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_instrument_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:110</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_instrument_name(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > instrName) {
		return Pointer.pointerToAddress(TLDFM_set_instrument_name(Pointer.getPeer(instrumentHandle), Pointer.getPeer(instrName)));
	}
	@Ptr 
	protected native static long TLDFM_set_instrument_name(@Ptr long instrumentHandle, @Ptr long instrName);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_serial_Number(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:113</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_serial_Number(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > serialNumber) {
		return Pointer.pointerToAddress(TLDFM_get_serial_Number(Pointer.getPeer(instrumentHandle), Pointer.getPeer(serialNumber)));
	}
	@Ptr 
	protected native static long TLDFM_get_serial_Number(@Ptr long instrumentHandle, @Ptr long serialNumber);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_serial_number(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:116</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_serial_number(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > serialNumber) {
		return Pointer.pointerToAddress(TLDFM_set_serial_number(Pointer.getPeer(instrumentHandle), Pointer.getPeer(serialNumber)));
	}
	@Ptr 
	protected native static long TLDFM_set_serial_number(@Ptr long instrumentHandle, @Ptr long serialNumber);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_user_text(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:119</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_user_text(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > userText) {
		return Pointer.pointerToAddress(TLDFM_get_user_text(Pointer.getPeer(instrumentHandle), Pointer.getPeer(userText)));
	}
	@Ptr 
	protected native static long TLDFM_get_user_text(@Ptr long instrumentHandle, @Ptr long userText);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_user_text(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:122</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_user_text(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > userText) {
		return Pointer.pointerToAddress(TLDFM_set_user_text(Pointer.getPeer(instrumentHandle), Pointer.getPeer(userText)));
	}
	@Ptr 
	protected native static long TLDFM_set_user_text(@Ptr long instrumentHandle, @Ptr long userText);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_update_firmware(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:125</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_update_firmware(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViChar > firmwareFile) {
		return Pointer.pointerToAddress(TLDFM_update_firmware(Pointer.getPeer(instrumentHandle), Pointer.getPeer(firmwareFile)));
	}
	@Ptr 
	protected native static long TLDFM_update_firmware(@Ptr long instrumentHandle, @Ptr long firmwareFile);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_enable_event(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:128</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_enable_event(TLDFM_64Library.ViSession instrumentHandle) {
		return Pointer.pointerToAddress(TLDFM_enable_event(Pointer.getPeer(instrumentHandle)));
	}
	@Ptr 
	protected native static long TLDFM_enable_event(@Ptr long instrumentHandle);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_disable_event(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:130</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_disable_event(TLDFM_64Library.ViSession instrumentHandle) {
		return Pointer.pointerToAddress(TLDFM_disable_event(Pointer.getPeer(instrumentHandle)));
	}
	@Ptr 
	protected native static long TLDFM_disable_event(@Ptr long instrumentHandle);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_add_status_delegate(ViSession, StatusUpdate)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:132</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_add_status_delegate(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.StatusUpdate statusUpdateDelegate) {
		return Pointer.pointerToAddress(TLDFM_add_status_delegate(Pointer.getPeer(instrumentHandle), Pointer.getPeer(statusUpdateDelegate)));
	}
	@Ptr 
	protected native static long TLDFM_add_status_delegate(@Ptr long instrumentHandle, @Ptr long statusUpdateDelegate);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_segment_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:137</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_segment_count(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViUInt32 > pSegmentCount) {
		return Pointer.pointerToAddress(TLDFM_get_segment_count(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSegmentCount)));
	}
	@Ptr 
	protected native static long TLDFM_get_segment_count(@Ptr long instrumentHandle, @Ptr long pSegmentCount);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_segment_maximum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:140</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_segment_maximum(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pSegmentMaximum) {
		return Pointer.pointerToAddress(TLDFM_get_segment_maximum(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSegmentMaximum)));
	}
	@Ptr 
	protected native static long TLDFM_get_segment_maximum(@Ptr long instrumentHandle, @Ptr long pSegmentMaximum);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_segment_minimum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:143</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_segment_minimum(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pSegmentMinimum) {
		return Pointer.pointerToAddress(TLDFM_get_segment_minimum(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSegmentMinimum)));
	}
	@Ptr 
	protected native static long TLDFM_get_segment_minimum(@Ptr long instrumentHandle, @Ptr long pSegmentMinimum);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_tilt_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:146</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_tilt_count(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViUInt32 > pTiltCount) {
		return Pointer.pointerToAddress(TLDFM_get_tilt_count(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pTiltCount)));
	}
	@Ptr 
	protected native static long TLDFM_get_tilt_count(@Ptr long instrumentHandle, @Ptr long pTiltCount);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_tilt_maximum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:149</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_tilt_maximum(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pTiltMaximum) {
		return Pointer.pointerToAddress(TLDFM_get_tilt_maximum(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pTiltMaximum)));
	}
	@Ptr 
	protected native static long TLDFM_get_tilt_maximum(@Ptr long instrumentHandle, @Ptr long pTiltMaximum);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_tilt_minimum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:152</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_tilt_minimum(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pTiltMinimum) {
		return Pointer.pointerToAddress(TLDFM_get_tilt_minimum(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pTiltMinimum)));
	}
	@Ptr 
	protected native static long TLDFM_get_tilt_minimum(@Ptr long instrumentHandle, @Ptr long pTiltMinimum);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>_VI_FUNC TLDFM_set_access_level(ViSession, ViChar, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:157</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_access_level(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViChar accessLevel, Pointer<TLDFM_64Library.ViChar > accessPassword) {
		return Pointer.pointerToAddress(TLDFM_set_access_level(Pointer.getPeer(instrumentHandle), Pointer.getPeer(accessLevel), Pointer.getPeer(accessPassword)));
	}
	@Ptr 
	protected native static long TLDFM_set_access_level(@Ptr long instrumentHandle, @Ptr long accessLevel, @Ptr long accessPassword);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_device_configuration(ViSession, ViUInt32*, ViReal64*, ViReal64*, ViReal64*, ViUInt32*, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:161</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_device_configuration(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViUInt32 > pSegmentCnt, Pointer<TLDFM_64Library.ViReal64 > pMinSegmentVoltage, Pointer<TLDFM_64Library.ViReal64 > pMaxSegmentVoltage, Pointer<TLDFM_64Library.ViReal64 > pSegmentCommonVoltageMax, Pointer<TLDFM_64Library.ViUInt32 > pTiltElementCnt, Pointer<TLDFM_64Library.ViReal64 > pMinTiltVoltage, Pointer<TLDFM_64Library.ViReal64 > pMaxTiltVoltage, Pointer<TLDFM_64Library.ViReal64 > pTiltCommonVoltageMax) {
		return Pointer.pointerToAddress(TLDFM_get_device_configuration(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSegmentCnt), Pointer.getPeer(pMinSegmentVoltage), Pointer.getPeer(pMaxSegmentVoltage), Pointer.getPeer(pSegmentCommonVoltageMax), Pointer.getPeer(pTiltElementCnt), Pointer.getPeer(pMinTiltVoltage), Pointer.getPeer(pMaxTiltVoltage), Pointer.getPeer(pTiltCommonVoltageMax)));
	}
	@Ptr 
	protected native static long TLDFM_get_device_configuration(@Ptr long instrumentHandle, @Ptr long pSegmentCnt, @Ptr long pMinSegmentVoltage, @Ptr long pMaxSegmentVoltage, @Ptr long pSegmentCommonVoltageMax, @Ptr long pTiltElementCnt, @Ptr long pMinTiltVoltage, @Ptr long pMaxTiltVoltage, @Ptr long pTiltCommonVoltageMax);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_device_configuration(ViSession, ViUInt32, ViReal64, ViReal64, ViReal64, ViUInt32, ViReal64, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:171</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_device_configuration(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 segmentCnt, TLDFM_64Library.ViReal64 minSegmentVoltage, TLDFM_64Library.ViReal64 maxSegmentVoltage, TLDFM_64Library.ViReal64 segmentCommonVoltageMax, TLDFM_64Library.ViUInt32 tiltElementCnt, TLDFM_64Library.ViReal64 minTiltVoltage, TLDFM_64Library.ViReal64 maxTiltVoltage, TLDFM_64Library.ViReal64 tiltCommonVoltageMax) {
		return Pointer.pointerToAddress(TLDFM_set_device_configuration(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentCnt), Pointer.getPeer(minSegmentVoltage), Pointer.getPeer(maxSegmentVoltage), Pointer.getPeer(segmentCommonVoltageMax), Pointer.getPeer(tiltElementCnt), Pointer.getPeer(minTiltVoltage), Pointer.getPeer(maxTiltVoltage), Pointer.getPeer(tiltCommonVoltageMax)));
	}
	@Ptr 
	protected native static long TLDFM_set_device_configuration(@Ptr long instrumentHandle, @Ptr long segmentCnt, @Ptr long minSegmentVoltage, @Ptr long maxSegmentVoltage, @Ptr long segmentCommonVoltageMax, @Ptr long tiltElementCnt, @Ptr long minTiltVoltage, @Ptr long maxTiltVoltage, @Ptr long tiltCommonVoltageMax);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_device_calibration(ViSession, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:181</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_device_calibration(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pSegmentVoltageCompensation, Pointer<TLDFM_64Library.ViReal64 > pTiltVoltageCompensation, Pointer<TLDFM_64Library.ViReal64 > pSingleSegmentTiltVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_device_calibration(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pSegmentVoltageCompensation), Pointer.getPeer(pTiltVoltageCompensation), Pointer.getPeer(pSingleSegmentTiltVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_device_calibration(@Ptr long instrumentHandle, @Ptr long pSegmentVoltageCompensation, @Ptr long pTiltVoltageCompensation, @Ptr long pSingleSegmentTiltVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_device_calibration(ViSession, ViReal64, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:186</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_device_calibration(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViReal64 segmentVoltageCompensation, TLDFM_64Library.ViReal64 tiltVoltageCompensation, TLDFM_64Library.ViReal64 singleSegmentTiltVoltage) {
		return Pointer.pointerToAddress(TLDFM_set_device_calibration(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltageCompensation), Pointer.getPeer(tiltVoltageCompensation), Pointer.getPeer(singleSegmentTiltVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_set_device_calibration(@Ptr long instrumentHandle, @Ptr long segmentVoltageCompensation, @Ptr long tiltVoltageCompensation, @Ptr long singleSegmentTiltVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_hysteresis_parameters(ViSession, ViUInt32, ViUInt32*, ViReal64*, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:191</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_hysteresis_parameters(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 target, Pointer<TLDFM_64Library.ViUInt32 > pCount, Pointer<TLDFM_64Library.ViReal64 > pNonlinearFactor, Pointer<TLDFM_64Library.ViReal64 > arrayTresholdInverter, Pointer<TLDFM_64Library.ViReal64 > arrayWeightInverter) {
		return Pointer.pointerToAddress(TLDFM_get_hysteresis_parameters(Pointer.getPeer(instrumentHandle), Pointer.getPeer(target), Pointer.getPeer(pCount), Pointer.getPeer(pNonlinearFactor), Pointer.getPeer(arrayTresholdInverter), Pointer.getPeer(arrayWeightInverter)));
	}
	@Ptr 
	protected native static long TLDFM_get_hysteresis_parameters(@Ptr long instrumentHandle, @Ptr long target, @Ptr long pCount, @Ptr long pNonlinearFactor, @Ptr long arrayTresholdInverter, @Ptr long arrayWeightInverter);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_set_hysteresis_parameters(ViSession, ViUInt32, ViUInt32, ViReal64, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:198</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_set_hysteresis_parameters(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 target, TLDFM_64Library.ViUInt32 count, TLDFM_64Library.ViReal64 nonlinearFactor, Pointer<TLDFM_64Library.ViReal64 > arrayTresholdInverter, Pointer<TLDFM_64Library.ViReal64 > arrayWeightInverter) {
		return Pointer.pointerToAddress(TLDFM_set_hysteresis_parameters(Pointer.getPeer(instrumentHandle), Pointer.getPeer(target), Pointer.getPeer(count), Pointer.getPeer(nonlinearFactor), Pointer.getPeer(arrayTresholdInverter), Pointer.getPeer(arrayWeightInverter)));
	}
	@Ptr 
	protected native static long TLDFM_set_hysteresis_parameters(@Ptr long instrumentHandle, @Ptr long target, @Ptr long count, @Ptr long nonlinearFactor, @Ptr long arrayTresholdInverter, @Ptr long arrayWeightInverter);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_enabled_hysteresis_compensation(ViSession, ViUInt32, ViBoolean*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:205</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_enabled_hysteresis_compensation(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 target, Pointer<TLDFM_64Library.ViBoolean > pEnabled) {
		return Pointer.pointerToAddress(TLDFM_enabled_hysteresis_compensation(Pointer.getPeer(instrumentHandle), Pointer.getPeer(target), Pointer.getPeer(pEnabled)));
	}
	@Ptr 
	protected native static long TLDFM_enabled_hysteresis_compensation(@Ptr long instrumentHandle, @Ptr long target, @Ptr long pEnabled);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_enable_hysteresis_compensation(ViSession, ViUInt32, ViBoolean)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:209</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_enable_hysteresis_compensation(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 target, TLDFM_64Library.ViBoolean enable) {
		return Pointer.pointerToAddress(TLDFM_enable_hysteresis_compensation(Pointer.getPeer(instrumentHandle), Pointer.getPeer(target), Pointer.getPeer(enable)));
	}
	@Ptr 
	protected native static long TLDFM_enable_hysteresis_compensation(@Ptr long instrumentHandle, @Ptr long target, @Ptr long enable);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>_VI_FUNC TLDFM_get_measured_segment_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:215</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_measured_segment_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 segmentIndex, Pointer<TLDFM_64Library.ViReal64 > pSegmentVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_measured_segment_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentIndex), Pointer.getPeer(pSegmentVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_measured_segment_voltage(@Ptr long instrumentHandle, @Ptr long segmentIndex, @Ptr long pSegmentVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_measured_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:219</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_measured_segment_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_measured_segment_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_measured_segment_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_measured_tilt_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:222</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_measured_tilt_voltage(TLDFM_64Library.ViSession instrumentHandle, TLDFM_64Library.ViUInt32 tiltIndex, Pointer<TLDFM_64Library.ViReal64 > pTiltVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_measured_tilt_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltIndex), Pointer.getPeer(pTiltVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_measured_tilt_voltage(@Ptr long instrumentHandle, @Ptr long tiltIndex, @Ptr long pTiltVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_measured_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:226</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_measured_tilt_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_measured_tilt_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_measured_tilt_voltages(@Ptr long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_measured_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:229</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_measured_voltages(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > segmentVoltages, Pointer<TLDFM_64Library.ViReal64 > tiltVoltages) {
		return Pointer.pointerToAddress(TLDFM_get_measured_voltages(Pointer.getPeer(instrumentHandle), Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages)));
	}
	@Ptr 
	protected native static long TLDFM_get_measured_voltages(@Ptr long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_feedback_voltage(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:233</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_feedback_voltage(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pFeedbackVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_feedback_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pFeedbackVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_feedback_voltage(@Ptr long instrumentHandle, @Ptr long pFeedbackVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_feedback_current(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:236</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_feedback_current(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pFeedbackCurrent) {
		return Pointer.pointerToAddress(TLDFM_get_feedback_current(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pFeedbackCurrent)));
	}
	@Ptr 
	protected native static long TLDFM_get_feedback_current(@Ptr long instrumentHandle, @Ptr long pFeedbackCurrent);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_feedback(ViSession, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:239</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_feedback(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pFeedbackVoltage, Pointer<TLDFM_64Library.ViReal64 > pFeedbackCurrent) {
		return Pointer.pointerToAddress(TLDFM_get_feedback(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pFeedbackVoltage), Pointer.getPeer(pFeedbackCurrent)));
	}
	@Ptr 
	protected native static long TLDFM_get_feedback(@Ptr long instrumentHandle, @Ptr long pFeedbackVoltage, @Ptr long pFeedbackCurrent);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_monitor_voltage(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:243</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_monitor_voltage(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pMonitorVoltage) {
		return Pointer.pointerToAddress(TLDFM_get_monitor_voltage(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pMonitorVoltage)));
	}
	@Ptr 
	protected native static long TLDFM_get_monitor_voltage(@Ptr long instrumentHandle, @Ptr long pMonitorVoltage);
	/**
	 * Original signature : <code>_VI_FUNC TLDFM_get_temperatures(ViSession, ViReal64*, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:246</i>
	 */
	public static TLDFM_64Library._VI_FUNC TLDFM_get_temperatures(TLDFM_64Library.ViSession instrumentHandle, Pointer<TLDFM_64Library.ViReal64 > pIC1Temperatur, Pointer<TLDFM_64Library.ViReal64 > pIC2Temperatur, Pointer<TLDFM_64Library.ViReal64 > pMirrorTemperatur, Pointer<TLDFM_64Library.ViReal64 > pElectronicTemperatur) {
		return Pointer.pointerToAddress(TLDFM_get_temperatures(Pointer.getPeer(instrumentHandle), Pointer.getPeer(pIC1Temperatur), Pointer.getPeer(pIC2Temperatur), Pointer.getPeer(pMirrorTemperatur), Pointer.getPeer(pElectronicTemperatur)));
	}
	@Ptr 
	protected native static long TLDFM_get_temperatures(@Ptr long instrumentHandle, @Ptr long pIC1Temperatur, @Ptr long pIC2Temperatur, @Ptr long pMirrorTemperatur, @Ptr long pElectronicTemperatur);
	/** Undefined type */
	public static interface StatusUpdate {
		
	};
	/** Undefined type */
	public static interface ViChar {
		
	};
	/** Undefined type */
	public static interface ViSession {
		
	};
	/** Undefined type */
	public static interface ViReal64 {
		
	};
	/** Undefined type */
	public static interface ViStatus {
		
	};
	/** Undefined type */
	public static interface _VI_FUNC {
		
	};
	/** Undefined type */
	public static interface ViInt32 {
		
	};
	/** Undefined type */
	public static interface ViBoolean {
		
	};
	/** Undefined type */
	public static interface ViString {
		
	};
	/** Undefined type */
	public static interface ViRsrc {
		
	};
	/** Undefined type */
	public static interface ViUInt32 {
		
	};
	/** Undefined type */
	public static interface ViInt16 {
		
	};
}
